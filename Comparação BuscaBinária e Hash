CÓDIGO BUSCA BINÁRIA (concluído)

import struct
import time
# import sys

# if len(sys.argv) != 2:
#    print "USO %s [CEP]" % sys.argv[0]
#    quit()

cep = input("Digite o cep a ser buscado\n\n")

inicio = time.time()

registroCEP = struct.Struct("72s72s72s72s2s8s2s")
cepColumn = 5
print "Tamanho da Estrutura: %d" % registroCEP.size
f = open("cep_ordenado.dat", "r")
line = f.read(registroCEP.size)

esq = 0
f.seek(0,2)
dir = f.tell() / registroCEP.size

while esq <= dir:
    valorMeio = esq + ((dir - esq) / 2)
    f.seek(valorMeio * registroCEP.size)
    line = f.read(registroCEP.size)
    record = registroCEP.unpack(line)
    if int(record[cepColumn]) == int(cep):
        for i in range(0, len(record) - 1):
            print record[i]  # .decode('latin1')
        break
    elif int(record[cepColumn]) < int(cep):
        esq = valorMeio + 1
    elif int(record[cepColumn]) > int(cep):
        dir = valorMeio - 1

if esq > dir:
    print "Cep nao encontrado"

fim = time.time()

print "\nTempo de execucao da Busca Binaria: ", fim-inicio, "segundos"

CÓDIGO HASH (em andamento)

#coding: utf-8

import struct
import hashlib
import os

hashSize = 700001
structCEP = struct.Struct("72s72s72s72s2s8s2s")
cepColumn = 5
hashFormat = "8sLL"
hashStruct = struct.Struct(hashFormat)

f = open("cep.dat", "rb")
f2 = open("cep-hash.dat", "wb+")

def hash(x):
	return int(hashlib.sha1(x).hexdigest(),16)%hashSize

emptyIndexRecord = hashStruct.pack("",0,0)

for i in range (0, hashSize):
	f2.write(emptyIndexRecord)
f2.close()

f2 = open("cep-hash.dat", "rb+")

line = f.read(structCEP.size)

fi.seek(0,os.SEEK_END)
fileIndexSize = fi.tell()
print "IndexFileSize", fileIndexSize


recordNumber = 0

while line != "":
	var = structCEP.unpack(line)		
	i = hash(var[cepColumn])
	print i, hashStruct.size
	f2.seek(i*hashStruct.size)
	k = hashStruct.unpack(f2.read(hashStruct.size))
	
	if k[0][0] == "\0":
		f2.write(hashStruct.pack(var[cepColumn], recordNumber, 0))
	
	else:
		nextPointer = k[2]
		f2.write(hashStruct.pack(k[0], k[1], os.getsize("cep-hash.dat")))
		f2.seek(0,2)
		f2.write(hashStruct.pack(var[cepColumn], recordNumber, nextPointer))

	recordNumber = recordNumber + 1
	line = f.read(structCEP.size)

f.close()
f2.close()
